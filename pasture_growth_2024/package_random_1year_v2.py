"""
created matt_dumont 
on: 7/5/24
"""
import netCDF4 as nc
import numpy as np
from pathlib import Path
import zipfile
import datetime
from project_base import proj_root

import pandas as pd

from Storylines.storyline_runs.run_random_suite import get_mean_1yr_data, default_mode_sites

month_len = {
    1: 31,
    2: 28,
    3: 31,
    4: 30,
    5: 31,
    6: 30,
    7: 31,
    8: 31,
    9: 30,
    10: 31,
    11: 30,
    12: 31,
}

complevel = 4
complib = 'zlib'


def make_nc_of_1year_data(outpath):
    months = np.array([7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6])
    with (nc.Dataset(outpath, 'w') as ds):

        ds.description = (
            'This dataset contains the annual total and monthly total pasture growth rates for the 1 year random '
            'simulation suite. The suite was generated using the Storylines/final_random_suite/package_random_1year_v2.py '
            'script. The suite was generated by a Markov chain process that used event transition probabilities to '
            'generate the suite.  Therefore, this is a `representative` sample of the distribution of 1 year pasture '
            'growth scenarios. The individual storyline probabilities are stored in the dataset under the '
            '`log10_prob_irrigated` and `log10_prob_dryland` columns, which supports the generation of nyear '
            'suites (assuming that the probabilities of each year are independent).'
        )
        ds.filetype = 'netCDF4'
        ds.history = f'Created by matt_dumont on {datetime.date.today().isoformat()}'

        # dimensions
        ds.createDimension('month', 12)
        var = ds.createVariable('month', np.uint8, ('month',))
        var[:] = months
        ds.createDimension('site-mode', len(default_mode_sites))
        var = ds.createVariable('site-mode', np.uint8, ('site-mode',))
        var[:] = np.arange(0, len(default_mode_sites))
        var.setncatts({'long_name': 'site-mode',
                       'flag_values': np.arange(0, len(default_mode_sites)),
                       'flag_meanings': ' '.join([f'{site}-{mode}' for mode, site in default_mode_sites])})
        ds.createDimension('sim', 140000)

        ds.createDimension('percentile', 101)
        var = ds.createVariable('percentile', np.uint8, ('percentile',))
        var[:] = np.arange(0, 101)
        var.setncatts({'long_name': 'percentile',
                       })

        # variables
        irr_type = ds.createVariable('irr_type', np.uint8, ('sim',), compression=complib,
                                     complevel=complevel)
        irr_type.setncatts({
            'long_name': 'Irrigation Type',
            'flag_values': [0, 1],
            'flag_meanings': 'good bad',
            'description': ('good=all irrigation restrictions were drawn from 50th percentile or lower,\n'
                            'bad=all irrigation restrictions were drawn from 50th percentile or higher')
        })

        monthly_pg = ds.createVariable('month_pg', np.uint16, ('month', 'sim', 'site-mode'), compression=complib,
                                       complevel=complevel, fill_value=65535)
        monthly_pg.setncatts({'long_name': 'Monthly Pasture Growth Rate',
                              'units': 'kg DM/ha/month',
                              'missing_value': 65535,
                              })

        annual_pg = ds.createVariable('annual_pg', np.uint16, ('sim', 'site-mode'), compression=complib,
                                      complevel=complevel, fill_value=65535)
        annual_pg.setncatts({'long_name': 'Annual Pasture Growth Rate',
                             'units': 'kg DM/ha/year',
                             'missing_value': 65535,

                             })

        story_prob_irr = ds.createVariable('story_prob_irr', np.uint16, ('sim',), compression=complib,
                                           complevel=complevel, fill_value=65535)
        story_prob_irr.setncatts({'long_name': 'Storyline Probability for irrigated sites',
                                  'units': 'log10(prob)',
                                  'add_offset': 0,
                                  'scale_factor': -0.01,
                                  'missing_value': 65535,
                                  })
        story_prob_dry = ds.createVariable('story_prob_dry', np.uint16, ('sim',), compression=complib,
                                           complevel=complevel, fill_value=65535)
        story_prob_dry.setncatts({'long_name': 'Storyline Probability for dryland sites',
                                  'units': 'log10(prob)',
                                  'add_offset': 0,
                                  'scale_factor': -0.01,
                                  'missing_value': 65535,
                                  })

        storyline_temp = ds.createVariable('storyline_temp', np.uint8, ('month', 'sim'), compression=complib,
                                           complevel=complevel)
        storyline_temp.setncatts({'long_name': 'Storyline Temperature class',
                                  'flag_values': [0, 1, 2],
                                  'flag_meanings': 'cold average hot',
                                  })

        storyline_precip = ds.createVariable('storyline_precip', np.uint8, ('month', 'sim'), compression=complib,
                                             complevel=complevel)
        storyline_precip.setncatts({'long_name': 'Storyline Precipitation class',
                                    'flag_values': [0, 1, 2],
                                    'flag_meanings': 'dry average wet',
                                    'description': ('The precipitation class of the month, Note that the irrigation '
                                                    'restrictions also require the previous months precipitation class '
                                                    'to be known, for the first month the previous precipitation '
                                                    'class was Average (as irrigation restrictions are not applicable '
                                                    'in August')
                                    })
        storyline_rest_per = ds.createVariable('storyline_rest_per', np.uint8, ('month', 'sim'), compression=complib,
                                               complevel=complevel)
        storyline_rest_per.setncatts({'long_name': 'Storyline Rest Percentile',
                                      })

        storyline_rest = ds.createVariable('storyline_rest', np.uint16, ('month', 'sim'), compression=complib,
                                           complevel=complevel)
        storyline_rest.setncatts({'long_name': 'Storyline Restriction',
                                  'units': 'fraction of days on restriction',
                                  'scale_factor': 0.001,
                                  'add_offset': 0,
                                  })

        exceedence = ds.createVariable('exceedence_level', np.uint16, ('percentile', 'site-mode'), compression=complib,
                                       complevel=complevel)
        exceedence.setncatts({'long_name': 'Exceedence Level',
                              'units': 'kg DM/ha/year',
                              'description': ('The exceedence level of the annual pasture growth rate, i.e. the value '
                                              'that is exceeded by the given percentile of the distribution'),
                              'missing_value': 65535,
                              })

        ds.set_auto_scale(False)

        for irri, irr in enumerate(['good', 'bad']):
            print('saving ', irr)
            # save pg_data.
            if irr == 'good':
                data = get_mean_1yr_data(good_irr=True, bad_irr=False)
                sidx = 0
                eidx = 70000
                zipfile_path = proj_root.joinpath('Storylines/random_good_irr.zip')
            else:
                zipfile_path = proj_root.joinpath('Storylines/random_bad_irr.zip')
                data = get_mean_1yr_data(good_irr=False, bad_irr=True)
                sidx = 70000
                eidx = 140000

            for smi, (mode, site) in enumerate(default_mode_sites):
                sm = f'{site}-{mode}'
                print('saving ', sm)
                # annual_pg np.uint16 ('sim', 'site-mode')
                temp = data[f'{sm}_pg_yr1'].values
                temp = np.round(temp)
                assert np.nanmin(temp) >= 0
                assert np.nanmax(temp) < 65534
                temp[np.isnan(temp)] = 65535
                assert np.isfinite(temp).all()
                annual_pg[sidx:eidx, smi] = temp.astype(np.uint16)

                # monthly_pg np.uint16 ('month', 'sim', 'site-mode')
                temp = np.concatenate([
                    data[f'{sm}_pg_m{m:02d}'].values[np.newaxis] for m in months
                ], axis=0)
                temp = np.round(temp)
                assert np.nanmin(temp) >= 0
                assert np.nanmax(temp) < 65534
                temp[np.isnan(temp)] = 65535
                assert np.isfinite(temp).all()
                monthly_pg[:, sidx:eidx, smi] = temp.astype(np.uint16)

            # save probability and irrigation type
            # irr_type np.uint8, ('sim',)
            irr_type[sidx:eidx] = irri

            # story_prob_irr np.uint16, ('sim',), 'scale_factor': -0.01,
            temp = np.round(data[f'log10_prob_irrigated'] * -100)
            assert np.nanmin(temp) >= 0
            assert np.nanmax(temp) < 65534
            temp[np.isnan(temp)] = 65535
            assert np.isfinite(temp).all()
            temp = temp.astype(np.uint16)
            story_prob_irr[sidx:eidx] = temp

            # story_prob_dry np.uint16, ('sim',), 'scale_factor': -0.01,
            temp = np.round(data[f'log10_prob_dryland'] * -100)
            assert np.nanmin(temp) >= 0
            assert np.nanmax(temp) < 65534
            temp[np.isnan(temp)] = 65535
            assert np.isfinite(temp).all()
            temp = temp.astype(np.uint16)
            story_prob_dry[sidx:eidx] = temp

            # save_storyline data.
            precip = np.zeros((12, 70000)) - 1
            temp = np.zeros((12, 70000)) - 1
            rest_per = np.zeros((12, 70000)) - 1
            rest = np.zeros((12, 70000)) - 1
            with zipfile.ZipFile(zipfile_path) as zf:
                for i, idv in enumerate(data['ID']):
                    if i % 1000 == 0:
                        print(f'reading storyline {i + 1} of 70000')
                    t = pd.read_csv(zf.open(f'{zipfile_path.stem}/{idv}.csv'))
                    for ci, val in enumerate(['D', 'A', 'W']):
                        idx = t.precip_class == val
                        precip[idx, i] = ci
                    for ci, val in enumerate(['C', 'A', 'H']):
                        idx = t.temp_class == val
                        temp[idx, i] = ci
                    rest_per[:, i] = t.rest_per * 100
                    rest[:, i] = t.rest

            # storyline_precip, np.uint8, ('month', 'sim'),
            # 'flag_values': [0, 1, 2],
            # 'flag_meanings': 'dry average wet',
            assert precip.min() >= 0
            storyline_precip[:, sidx:eidx] = precip.astype(np.uint8)

            # storyline_temp, np.uint8, ('month', 'sim'),
            # 'flag_values': [0, 1, 2],
            # 'flag_meanings': 'cold average hot',
            assert temp.min() >= 0
            storyline_temp[:, sidx:eidx] = temp.astype(np.uint8)

            # storyline_rest_per, np.uint8, ('month', 'sim'),
            assert rest_per.min() >= 0
            assert rest_per.max() <= 100
            assert np.isfinite(rest_per).all()
            storyline_rest_per[:, sidx:eidx] = rest_per.astype(np.uint8)

            # storyline_rest = np.uint16, ('month', 'sim')
            # 'scale_factor': 0.001,
            # 'add_offset': 0,
            rest = np.round(rest * 1000)
            assert rest.min() >= 0
            assert rest.max() < 65534
            assert np.isfinite(rest).all()

            storyline_rest[:, sidx:eidx] = rest.astype(np.uint16)

        # cumulative exceedance probabilities.
        annual = np.array(annual_pg[:]).astype(float)
        annual[annual == 65535] = np.nan
        temp = np.nanpercentile(annual, np.arange(101), axis=0)
        assert np.nanmin(temp) >= 0
        assert np.nanmax(temp) < 65534
        assert np.isfinite(temp).all()
        temp = np.round(temp)
        exceedence[:] = temp.astype(np.uint16)


if __name__ == '__main__':
    make_nc_of_1year_data(proj_root.home().joinpath('Downloads', '1year_random_suite.nc'))
